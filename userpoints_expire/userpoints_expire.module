<?php

//$Id: userpoints_expire.module,v 1.1 2007-06-24 00:35:04 kbahey Exp $

// Copyright 2005-2007 Khalid Baheyeldin http://2bits.com

define('USERPOINTS_EXPIRE_PERIOD',  'userpoints_expire_period');
define('USERPOINTS_EXPIRE_POINTS',  'userpoints_expire_points');

function userpoints_expire_help($section) {
  switch ($section) {
    case 'admin/modules#description':
      $output = t('<strong>UP:</strong> Inactive users lose a certain number of %points every certain period.', userpoints_translation());
      break;
  }
  return $output;
}

function userpoints_expire_userpoints($op, $new_points = 0, $uid = 0, $event = '') {
  switch($op) {
    case 'setting':

      $group = 'expire';
      $form[$group] = array(
        '#type' => 'fieldset',
        '#title' => t('Points expiry'),
        '#description' =>  t('At predefined intervals, certain number of points are added/subtracted, if there is no activity by the user. Useful for subscriptions paid for by points. Cron must be run at least once a day.'),
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
      );

      $period = drupal_map_assoc(array(86400, 172800, 259200, 604800, 1209600, 2419200), 'format_interval');

      $form[$group][USERPOINTS_EXPIRE_PERIOD] = array(
        '#type'          => 'select',
        '#title'         => t('Period'),
        '#default_value' => variable_get(USERPOINTS_EXPIRE_PERIOD, 0),
        '#options'       => $period,
        '#description'   => 'Period for point expiry. Users who do not earn points during this interval will have some points subtracted or added.',
        );

      $form[$group][USERPOINTS_EXPIRE_POINTS] = array(
        '#type'          => 'textfield',
        '#size'          => 10,
        '#title'         => t('Points lost per period'),
        '#default_value' => variable_get(USERPOINTS_EXPIRE_POINTS, 0),
        '#description' =>  t('Number of points to be subtracted/added per period. Negative values are subtracted, while positive ones are added.'),
        );

      return $form;
      break;
  }
}

function userpoints_expire_cron() {
  // Run only once a day, to decrease load on system
  if (time() - variable_get('cron_last', 0) > 86400) {
    // Take the negative value of the points
	  $points = variable_get(USERPOINTS_EXPIRE_POINTS, 0);
	  $period = variable_get(USERPOINTS_EXPIRE_PERIOD, 0);

    // This may be an expensive query on sites with a large number of users and transactions
	  $result = db_query("SELECT DISTINCT(up.uid)
      FROM {userpoints} up INNER JOIN {userpoints_txn} upt USING(uid)
      WHERE upt.event <> 'expire' 
      AND up.points > 0
      AND upt.time_stamp < %d", time() - $period);

	  while($data = db_fetch_object($result)) {
      userpoints_userpointsapi('points', $points, $data->uid, 'expire');
	  }
  }
}
